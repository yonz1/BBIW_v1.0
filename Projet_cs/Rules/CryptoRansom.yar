import "pe"
import "hash"
import "math"

rule Wannacry 
{
	meta:
		Action = "Logicielle de rançons cryptant chaque données présente sur votre systéme et demande une rançons"
	strings:
		$maldomain = "http://www.ayylmaoTJHSSTasdfasdfasdfasdfasdfasdfasdf.com"
		$maldomain1 = "ayylmaoTJHSSTasdfasdfasdfasdfasdfasdfasdf.com"
		$malreg = {48 4B 43 55 5C 53 6F 66 74 77 61 72 65 5C 4D 69 63 72 6F 73 6F 66 74 5C 57 69 6E 64 6F 77 73 5C 43 75 72 72 65 6E 74 56 65 72 73 69 6F 6E 5C 52 75 6E}
		// Registre de sauvegarde de doublepulsar (backdoor)
		$malfile = "@WanaDecryptor@.exe"  
		// fichier des décryptage
		$malAPI1 = "CryptGenKey"
		$malAPI2 = "CryptEncrypt "
		$malAPI3 = "CryptImportKey"
		$malAPI4 = "CryptExportKey"
		$malAPI5 = "CryptDestroyKey"
		// API utilise pour la fonction de cryptage (RSA et AES)

	condition:
		all of them
}

rule Petya
{
	meta:
		Action = "Logicielle de rançons cryptant chaque données présente sur votre systéme et demande une rançons"
	strings:
		$malAPI1 = "CreateFileA"
		$malAPI2= "WriteFile"
		$malAPI3 = "CloseHandle"
		$malAPI4 = "WinExec"
		$string= "shutdown.exe"
		$string2 = "PhysicalDrive0"
		// Accède au disque physique de la cible
		$stringC1 = "{0x04, 0xE8, 0x14, 0x00, 0xE8, 0x18, 0x00, 0xBE, 0x4A, 0x7C, 0xE8, 0x1C, 0x00, 0xBE, 0x6B, 0x7C, 0xE8, 0x16, 0x00, 0xE8, 0x25, 0x00, 0xEB, 0xFE, 0x8C, 0xC0, 0x8E, 0xD8, 0x8E, 0xD0, 0xC3, 0xB4, 0x00, 0xB0, 0x13, 0xCD, 0x10, 0xB8, 0x13, 0x00, 0xC3, 0xB4, 0x0E, 0x8A, 0x1E, 0x00, 0x7C, 0x8A, 0x04, 0xCD, 0x10, 0x46, 0x8A, 0x04, 0x3C, 0x00, 0x75, 0xF7, 0xC3, 0xB4, 0x00, 0xCD, 0x16, 0x3C, 0x0D, 0x74, 0x02, 0xEB, 0xF6, 0xEA, 0x00, 0x00, 0xFF, 0xFF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4D, 0x72, 0x45, 0x6D, 0x70, 0x79, 0x20, 0x4D, 0x42, 0x52, 0x20, 0x4F, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x0D, 0x0A, 0x00, 0x0A, 0x0A, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6A, 0x75, 0x73, 0x74, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x61, 0x62, 0x6F, 0x75, 0x74, 0x20, 0x4D, 0x42, 0x52, 0x20, 0x49, 0x20, 0x64, 0x69, 0x64, 0x2E, 0x0D, 0x0A, 0x54, 0x68, 0x61, 0x6E, 0x6B, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x3B, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA};"
		// Implémentation du code en C	
		$stringC2 = {68 61 72 64 64 69 73 6B 20 3D 20 66 6F 70 65 6E 28 44 49 53 4B 2C 20 22 77 62 22 29 3B}
		$stringC3 = {66 77 72 69 74 65 28 70 61 79 6C 6F 61 64 2C 20 73 69 7A 65 6F 66 28 70 61 79 6C 6F 61 64 29 2C 20 31 2C 20 68 61 72 64 64 69 73 6B 29 3B}
	condition:
		(all of ($malAPI*) and all of ($string*)) or all of ($stringC*)
}

rule NotePetya 
{
	meta :
		Action = "Logicielle de rançons cryptant chaque données présente sur votre systéme et demande une rançons"
	strings:
		$file = {43 3A 5C 77 69 6E 64 6F 77 73 5C 70 65 72 66 63 2E 64 61 74}
		// DLL de ramsomware
		$file1 = {43 3A 5C 77 69 6E 64 6F 77 73 5C 64 6C 6C 68 6F 73 74 2E 64 61 74}
		// DLL lancer avec ce programme d'exécution
		$expl = {201C 43 3A 5C 57 69 6E 64 6F 77 73 5C 70 65 72 66 63 2E 64 61 74 201D 2C 23}
		$Processcheck1 = {30 78 36 34 30 33 35 32 37 45 20}
		$Processcheck2 = {30 78 32 33 32 31 34 42 34 34}
		$Processcheck3 = {30 78 36 35 31 42 33 30 30 35}
		$API = "OpenProcess("
		// Exécutable de gestion de mot de passe
		$DLL = "wdigest.dll"
		$lookfor1 = "wdigest.dll"
		// Gestion de sécurité des processus
		$lookfor = "lsasrv.dll"
		// Gestion de sécurité des comptes et services
		// API pour la propagation via SMB
		$API1 = "GetExtendedTcpTable"
		$API2 = "GetIpNetTable"
		$API3 = "NetServerEnum"
		$API4 = "NetServerGetInfo"
		$RCE = {43 3A 5C 57 69 6E 64 6F 77 73 5C 64 6C 6C 68 6F 73 74 2E 64 61 74 20 5C 5C [9-17] 20 2D 61 63 63 65 70 74 65 75 6C 61 20 2D 73 20 2D 64 20 43 3A 5C 57 69 6E 64 6F 77 73 5C 53 79 73 74 65 6D 33 32 5C 72 75 6E 64 6C 6C 33 32 2E 65 78 65}
		// Exécution de code à distance
		$Bitcon = "1Mz7153HMuxXTuR2R1t78mGSdzaAtNbBWX"
		$ScheduleTask = {2F 63 20 73 63 68 74 61 73 6B 73 20 2F 43 72 65 61 74 65 2F 53 43 20 6F 6E 63 65 20 2F [1-20] 20 201C 201D 20 2F [1-30] 20 201C 43 3A 5C 57 69 6E 64 6F 77 73 5C 73 79 73 74 65 6D 33 32 5C 73 68 75 74 64 6F 77 6E 2E 65 78 65 20 2F 72 20 2F 66 201D 20 2F [0-20] 20 3C 48 48 3A 4D 4D 3E}
		// Créer une tâche programme de reboot
	condition:
		all of them and filesize < 600KB
}

rule Python 
{
	meta:
		Action = "Logicielle de rançons cryptant chaque données présente sur votre systéme et demande une rançons"
	strings:
		$Deriv_pass = "def derive_key(salt, password):"
		// Génére une fonction de dérivation de mot de passe
		$Key_gen = {64 65 66 20 67 65 6E 65 72 61 74 65 5F 6B 65 79 28 70 61 73 73 77 6F 72 64 2C 20 73 61 6C 74 5F 73 69 7A 65 3D [1-8] 2C 20 6C 6F 61 64 5F 65 78 69 73 74 69 6E 67 5F 73 61 6C 74 3D [4-5] 2C 20 73 61 76 65 5F 73 61 6C 74 3D [4-5] 29 3A}
		$base64_encode = {72 65 74 75 72 6E 20 62 61 73 65 36 34 2E 75 72 6C 73 61 66 65 5F 62 36 34 65 6E 63 6F 64 65 28 [1-100] 29}
		$Encrypt = {64 65 66 20 65 6E 63 72 79 70 74 28 [1-50] 20 [1-100] 29 3A}
	condition:
		all of them
}

rule Python_2 {
	meta:
		Action = "Logicielle de rançons cryptant chaque données présente sur votre systéme et demande une rançons"
	strings:
		$Import1 = "from cryptography.fernet import Fernet"
		$Import2 = "import os"
		$Import = "import socket"
		$API1 = "get_mac_address"
		$API = "encrypt_file("
		$callback = "self.send_to_server(json.dumps(data))"
		$path = "file_path = os.path.join(root, file)"
		$pathadd = "encrypted_files.append(encrypted_file_path)"
	condition:
		all of them or (all of ($API*) and all of ($Import*))
}


rule ransom_C {
	meta:
		Action = "Logicielle de rançons cryptant chaque données présente sur votre systéme et demande une rançons"
	strings:
		$API = "openFile("	
		$API1 = "encrypt("
		$Encrypt = "line[i] = line[i]^(key[*k%len_key]-1);" wide
		$API2 = "processFile("
		$read = "while((bytes = fread(line,1,MAX-1,in))>0){" wide
		$API4 = "docrypt(input, output, key, cypher[todo]);" wide
		$API3 = "hexa_to_bytes(hex_key, (unsigned char*)key, LENGTH);" wide
	condition:
		all of them 
}

rule basic {
	meta:
		Action = "Logicielle de rançons cryptant chaque données présente sur votre systéme et demande une rançons"
	strings:
		$API1 = "readfile("
		$API2 = "writefile("
		$API3 = "encryptDecrypt("
		$API4 = "encryptFile("
		$API5 = "check("
		$Check_name = "if (strstr(name, '/.') == NULL) {if (check(name) == 0) {encryptFile(name);"
		$cryp = "input[i] = input[i] ^ key[i % (sizeof(key)/sizeof(uint8_t))];" wide
	condition:
		all of them and filesize < 6KB
}




